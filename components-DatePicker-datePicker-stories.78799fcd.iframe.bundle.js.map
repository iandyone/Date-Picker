{"version":3,"file":"components-DatePicker-datePicker-stories.78799fcd.iframe.bundle.js","mappings":";AAGA;;;;;;;;;;;;;AAeA;;;;;;ACVA;AACA;AACA;AACA;;AAEA;AAGA;AACA;AACA;AAGA;;ACfA;;;;;ACGA;AAIA;AACA;;AAEA;;AAEA;;AAEA;AAGA;AACA;AACA;ACjBA;ACLA;AACA;AACA;;;;;;;AAOA;AACA;;;;AAIA;AACA;;;;AAIA;AACA;;;AAGA;AAGA;AACA;AAGA;AACA;;AAEA;AAGA;AACA;AAGA;AACA;;AAEA;;;;AAIA;AACA;AACA;;;AAGA;AAGA;AACA;AAGA;;;;AAIA;AACA;AACA;;;AAGA;AACA;AACA;;AAIA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAIA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;;;AAGA;AAGA;AACA;AAGA;AACA;;;AAGA;AAGA;AACA;AAGA;AACA;;;AAGA;AAGA;AACA;AAGA;AACA;;;AAGA;AAGA;AACA;AC7HA;;;;;ACTA;;AAIA;AAGA;AACA;AACA;;AAEA;;;;AAMA;;;;;;AAMA;;AAIA;AC5BA;;;;;ACCA;AACA;;;;AAIA;AACA;;;;AAIA;AACA;;AAIA;AACA;;;;;AAKA;AACA;ACtBA;;;;;;ACDA;ACDA;AACA;AACA;;;;AAMA;;;;;AAOA;;;AAGA;;;;AAMA;;;;;;AAQA;;;;;AASA;;;AAMA;;;;;;;AAOA;AACA;;AAIA;AAIA;AACA;;;;AAIA;;;;;ACjEA;;;;;AAOA;;AAIA;;;AAMA;;;;;;;AAOA;AACA;;AC3BA;;;;;;ACJA;;;;;AAKA;AACA;;;;AAIA;AACA;;;;AAIA;AACA;;AAIA;AACA;;;;;AAKA;AACA;AAGA;AACA;AC3BA;;;;;;;;;;;;;;;;;;;;;ACqBA;;;;;;;AAOA;;;;;AAKA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;AAOA;;;;;;AAQA;AACA;;;ACnEA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AAGA;AACA;;AAEA;AAGA;AACA;AAGA;;;;;AAOA;AACA;AACA;;;AAGA;;;;AAIA;;;;AAIA;;;AAKA;;;AAMA;;;;;;;AAOA;AACA;;AAIA;;;AAKA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;AAYA;;;;AAIA;;AAIA;ACrFA","sources":["webpack://date-picker/./src/components/ErrorBoundary/styled.ts","webpack://date-picker/./src/components/DateInput/styled.ts","webpack://date-picker/./src/components/DateInput/index.tsx","webpack://date-picker/./src/components/DateRange/styled.ts","webpack://date-picker/./src/components/DateRange/index.tsx","webpack://date-picker/./src/components/DaysView/DayCeil/styled.ts","webpack://date-picker/./src/components/DaysView/DayCeil/index.tsx","webpack://date-picker/./src/components/DaysView/styled.ts","webpack://date-picker/./src/components/DaysView/index.tsx","webpack://date-picker/./src/components/MonthView/MonthCeil/styled.ts","webpack://date-picker/./src/components/MonthView/MonthCeil/index.tsx","webpack://date-picker/./src/components/MonthView/index.tsx","webpack://date-picker/./src/components/Todos/styled.ts","webpack://date-picker/./src/components/Todos/TodoItem/styled.ts","webpack://date-picker/./src/components/Todos/TodoItem/index.tsx","webpack://date-picker/./src/components/YearsView/YearCeil/styled.ts","webpack://date-picker/./src/components/YearsView/YearCeil/index.tsx","webpack://date-picker/./src/styles/index.ts","webpack://date-picker/./src/services/View/styled.ts","webpack://date-picker/./src/services/View/index.tsx"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Spinner = styled.div`\r\n  border: 4px solid ${(props) => props.theme.activeCollor};\r\n  border-bottom: 4px solid transparent;\r\n  border-radius: 50%;\r\n  width: 50px;\r\n  height: 50px;\r\n  align-self: center;\r\n  animation: spinAnimation 1s linear infinite;\r\n\r\n  @keyframes spinAnimation {\r\n    to {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Message = styled.p`\r\n  font-size: 22px;\r\n`;\r\n","import styled, { css } from 'styled-components';\r\n\r\nexport const DatePicker = styled.form<{\r\n  $error: boolean;\r\n}>`\r\n  height: 26px;\r\n  margin-bottom: 15px;\r\n  display: flex;\r\n  border-radius: ${(props) => props.theme.borderRadius};\r\n  border: 1px solid ${(props) => props.theme.borderColor};\r\n  padding: ${(props) => props.theme.inputPadding};\r\n  transition: ${(props) => props.theme.transition};\r\n\r\n  ${({ $error }) =>\r\n    $error &&\r\n    css`\r\n      border-color: ${(props) => props.theme.errorColor};\r\n      transition: ${(props) => props.theme.transition};\r\n    `}\r\n`;\r\n\r\nexport const Input = styled.input.attrs((props) => ({\r\n  placeholder: props.placeholder,\r\n  type: 'text',\r\n}))`\r\n  width: 100%;\r\n`;\r\n","import { getDateFromUserInput } from '@utils/helpers/getDateFromUserInput';\r\nimport { ChangeEvent, FC, FormEvent, useRef, useState } from 'react';\r\n\r\nimport { DatePicker, Input } from './styled';\r\nimport { IDateInputProps } from './types';\r\n\r\nexport const DateInput: FC<IDateInputProps> = ({ handlerOnSubmit, maxDate, minDate }) => {\r\n  const [value, setValue] = useState<string>('');\r\n  const [error, setError] = useState<boolean>(false);\r\n  const inputRef = useRef(null);\r\n  const placeholder = 'Go to \"DD/MM/YYYY\"';\r\n\r\n  function handlerOnSubmitForm(e: FormEvent<HTMLFormElement>) {\r\n    const userDate = validateUserDateString(value);\r\n\r\n    if (userDate) {\r\n      setValue('');\r\n      setError(false);\r\n      inputRef.current.blur();\r\n      handlerOnSubmit(userDate);\r\n    } else {\r\n      setError(true);\r\n    }\r\n\r\n    e.preventDefault();\r\n  }\r\n\r\n  function validateUserDateString(value: string) {\r\n    return getDateFromUserInput(value, minDate, maxDate);\r\n  }\r\n\r\n  function handlerOnChange(e: ChangeEvent<HTMLInputElement>) {\r\n    const newValue = e.target.value;\r\n    const regex = /^[0-9/]*$/;\r\n    const limit = 10;\r\n    const isValidValue = newValue.length <= limit && regex.test(newValue);\r\n\r\n    if (isValidValue) {\r\n      setError(false);\r\n      setValue(newValue);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <DatePicker $error={error} onSubmit={handlerOnSubmitForm}>\r\n      <Input value={value} onChange={handlerOnChange} ref={inputRef} placeholder={placeholder} />\r\n    </DatePicker>\r\n  );\r\n};\r\n","import styled, { css } from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  column-gap: 20px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const RangeInput = styled.input.attrs((props) => ({\r\n  placeholder: props.placeholder,\r\n  type: 'text',\r\n}))<{ $error: boolean }>`\r\n  border-radius: ${(props) => props.theme.borderRadius};\r\n  border: 1px solid ${(props) => props.theme.borderColor};\r\n  height: 20px;\r\n  padding: ${(props) => props.theme.inputPadding};\r\n  width: 100%;\r\n  transition: ${(props) => props.theme.transition};\r\n\r\n  ${({ $error }) =>\r\n    $error &&\r\n    css`\r\n      border-color: ${(props) => props.theme.errorColor};\r\n      transition: ${(props) => props.theme.transition};\r\n    `}\r\n`;\r\n","import { getDateData } from '@utils/helpers/getDateData';\r\nimport { getDateFromUserInput } from '@utils/helpers/getDateFromUserInput';\r\nimport { getFixedValue } from '@utils/helpers/getFixedValue';\r\nimport { ChangeEvent, FC, memo, useEffect, useState } from 'react';\r\n\r\nimport { RangeInput, Wrapper } from './styled';\r\nimport { IDateRangeProps } from './types';\r\n\r\nconst DateRangeComponent: FC<IDateRangeProps> = ({\r\n  handlerRange,\r\n  rangeEnd,\r\n  rangeStart,\r\n  maxDate,\r\n  minDate,\r\n}) => {\r\n  const [rangeStartDate, setRangeStartDate] = useState(getStartRangeDateDefaultString);\r\n  const [rangeEndDate, setRangeEndDate] = useState(getEndRangeDateDefaultString);\r\n  const [rangeStartError, setRangeStartError] = useState(false);\r\n  const [rangeEndError, setRangeEndError] = useState(false);\r\n\r\n  function handlerOnChangeRangeStart(e: ChangeEvent<HTMLInputElement>) {\r\n    const date = e.target.value;\r\n    const startRangeDate = getDateFromUserInput(date, minDate, maxDate);\r\n\r\n    if (date.length <= 10) {\r\n      setRangeStartDate(date);\r\n    }\r\n\r\n    if (startRangeDate) {\r\n      setRangeStartError(false);\r\n      handlerRange(startRangeDate, 'start');\r\n    } else {\r\n      setRangeStartError(true);\r\n      handlerRange(null, 'start');\r\n    }\r\n  }\r\n\r\n  function handlerOnChangeRangeEnd(e: ChangeEvent<HTMLInputElement>) {\r\n    const date = e.target.value;\r\n    const startRangeDate = getDateFromUserInput(rangeStartDate, minDate, maxDate);\r\n    const endRangeDate = getDateFromUserInput(date, minDate, maxDate);\r\n\r\n    const isValidValue = endRangeDate > startRangeDate;\r\n\r\n    if (date.length <= 10) {\r\n      setRangeEndDate(date);\r\n    }\r\n\r\n    if (isValidValue) {\r\n      setRangeEndError(false);\r\n      handlerRange(endRangeDate, 'end');\r\n    } else {\r\n      setRangeEndError(true);\r\n      handlerRange(null, 'end');\r\n    }\r\n  }\r\n\r\n  function getStartRangeDateDefaultString() {\r\n    const { date, month, year } = getDateData(rangeStart);\r\n    const dayValue = getFixedValue(String(date));\r\n    const monthValue = getFixedValue(String(month + 1));\r\n\r\n    return `${dayValue}/${monthValue}/${year}`;\r\n  }\r\n\r\n  function getEndRangeDateDefaultString() {\r\n    if (!rangeEnd) {\r\n      return '';\r\n    }\r\n\r\n    const { date, month, year } = getDateData(rangeEnd);\r\n    const dayValue = getFixedValue(String(date));\r\n    const monthValue = getFixedValue(String(month + 1));\r\n\r\n    return `${dayValue}/${monthValue}/${year}`;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!rangeStart && !rangeEnd) {\r\n      setRangeStartDate('');\r\n      setRangeEndDate('');\r\n    }\r\n  }, [rangeEnd, rangeStart]);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <RangeInput\r\n        placeholder='From date'\r\n        onChange={handlerOnChangeRangeStart}\r\n        value={rangeStartDate}\r\n        $error={rangeStartError}\r\n      />\r\n      <RangeInput\r\n        placeholder='To date'\r\n        onChange={handlerOnChangeRangeEnd}\r\n        value={rangeEndDate}\r\n        $error={rangeEndError}\r\n      />\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport const DateRange = memo(DateRangeComponent);\r\n","import styled, { css } from 'styled-components';\r\n\r\nexport const Day = styled.span<{ $isHoliday?: boolean }>`\r\n  color: ${(props) => props.theme.textColor};\r\n  font-size: ${(props) => props.theme.fontSize};\r\n  padding: ${(props) => props.theme.padding} 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  height: 20px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: ${(props) => props.theme.borderRadius};\r\n  transition: ${(props) => props.theme.transition};\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    transition: ${(props) => props.theme.transition};\r\n    background-color: ${(props) => props.theme.hoverColor};\r\n  }\r\n\r\n  &:active {\r\n    transition: ${(props) => props.theme.transition};\r\n    transform: ${(props) => props.theme.transformActive};\r\n  }\r\n\r\n  ${({ $isHoliday }) =>\r\n    $isHoliday &&\r\n    css`\r\n      color: ${(props) => props.theme.holidayColor};\r\n    `}\r\n`;\r\n\r\nexport const OthertMonthDay = styled(Day)<{ $isHoliday?: boolean }>`\r\n  color: ${(props) => props.theme.otherDateColor};\r\n\r\n  ${({ $isHoliday }) =>\r\n    $isHoliday &&\r\n    css`\r\n      color: ${(props) => props.theme.holidayColor};\r\n    `}\r\n`;\r\n\r\nexport const CurrentDay = styled(Day)<{ $isHoliday?: boolean }>`\r\n  background: ${(props) => props.theme.activeCollor};\r\n  color: #fff;\r\n  transition: ${(props) => props.theme.transition};\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    transition: ${(props) => props.theme.transition};\r\n    background-color: ${(props) => props.theme.activeCollor};\r\n    transition: ${(props) => props.theme.transition};\r\n  }\r\n\r\n  ${({ $isHoliday }) =>\r\n    $isHoliday &&\r\n    css`\r\n      color: ${(props) => props.theme.holidayColor};\r\n    `}\r\n`;\r\n\r\nexport const RangeStartDay = styled(CurrentDay)<{ $isHoliday?: boolean }>`\r\n  padding: 0px;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: ${(props) => props.theme.rangeStartColor};\r\n  border-radius: ${(props) => props.theme.borderRadius} 0px 0px ${(props) => props.theme.borderRadius};\r\n  transition: ${(props) => props.theme.transition};\r\n\r\n  &:hover {\r\n    background: ${(props) => props.theme.rangeStartColor};\r\n    border: 1px solid ${(props) => props.theme.textColor};\r\n    transition: ${(props) => props.theme.transition};\r\n  }\r\n`;\r\n\r\nexport const RangeEndDay = styled(RangeStartDay)<{ $isHoliday?: boolean }>`\r\n  background: ${(props) => props.theme.rangeEndColor};\r\n  border-radius: 0px ${(props) => props.theme.borderRadius} ${(props) => props.theme.borderRadius} 0px;\r\n  transition: ${(props) => props.theme.transition};\r\n\r\n  &:hover {\r\n    background: ${(props) => props.theme.rangeEndColor};\r\n    border: 1px solid ${(props) => props.theme.textColor};\r\n    transition: ${(props) => props.theme.transition};\r\n  }\r\n`;\r\n\r\nexport const InRangeDay = styled(CurrentDay)<{ $isHoliday?: boolean }>`\r\n  background: ${(props) => props.theme.inRangeColor};\r\n  color: ${(props) => props.theme.activeCollor};\r\n  transition: ${(props) => props.theme.transition};\r\n  padding: 0px;\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: 0px;\r\n\r\n  &:hover {\r\n    background: ${(props) => props.theme.inRangeColor};\r\n    border: 1px solid ${(props) => props.theme.textColor};\r\n    transition: ${(props) => props.theme.transition};\r\n  }\r\n\r\n  ${({ $isHoliday }) =>\r\n    $isHoliday &&\r\n    css`\r\n      color: ${(props) => props.theme.holidayColor};\r\n    `}\r\n`;\r\n\r\nexport const RangeStartCurrentDay = styled(RangeStartDay)<{ $isHoliday?: boolean }>`\r\n  background: ${(props) => props.theme.activeCollor};\r\n  color: #fff;\r\n\r\n  ${({ $isHoliday }) =>\r\n    $isHoliday &&\r\n    css`\r\n      color: ${(props) => props.theme.holidayColor};\r\n    `}\r\n`;\r\n\r\nexport const RangeEndCurrentDay = styled(RangeEndDay)<{ $isHoliday?: boolean }>`\r\n  background: ${(props) => props.theme.activeCollor};\r\n  color: #fff;\r\n\r\n  ${({ $isHoliday }) =>\r\n    $isHoliday &&\r\n    css`\r\n      color: ${(props) => props.theme.holidayColor};\r\n    `}\r\n`;\r\n\r\nexport const InRangeCurrentDay = styled(InRangeDay)<{ $isHoliday?: boolean }>`\r\n  background: ${(props) => props.theme.activeCollor};\r\n  color: #fff;\r\n\r\n  ${({ $isHoliday }) =>\r\n    $isHoliday &&\r\n    css`\r\n      color: ${(props) => props.theme.holidayColor};\r\n    `}\r\n`;\r\n","import { getDateData } from '@utils/helpers/getDateData';\r\nimport { FC, memo, MouseEvent, useEffect, useMemo, useState } from 'react';\r\n\r\nimport {\r\n  CurrentDay,\r\n  Day,\r\n  InRangeCurrentDay,\r\n  InRangeDay,\r\n  OthertMonthDay,\r\n  RangeEndCurrentDay,\r\n  RangeEndDay,\r\n  RangeStartCurrentDay,\r\n  RangeStartDay,\r\n} from './styled';\r\nimport { IDayCeilProps } from './types';\r\n\r\nconst DayCeilComponent: FC<IDayCeilProps> = ({\r\n  date,\r\n  currentMonth,\r\n  handler,\r\n  rangeEnd,\r\n  rangeStart,\r\n  onContext,\r\n}) => {\r\n  const { day, month, year } = date;\r\n  const { date: todayDate, month: todayMonth, year: todayYear } = getDateData(new Date());\r\n  const Component = getComponent();\r\n  const key = useMemo(getKey, [day, month, year]);\r\n  const [isHoliday, setIsHoliday] = useState(getHolidayStatus);\r\n\r\n  function getHolidayStatus() {\r\n    const holidays = JSON.parse(localStorage.getItem('holidays')) ?? {};\r\n\r\n    return Boolean(holidays[key]);\r\n  }\r\n\r\n  function getKey() {\r\n    return `${day}${month}${year}`;\r\n  }\r\n\r\n  function getComponent() {\r\n    const isRange = rangeStart && rangeEnd;\r\n    const ceilDate = new Date(year, month, day);\r\n\r\n    const isToday = day === todayDate && month === todayMonth && year === todayYear;\r\n    const isTodayStartRange = isRange && isToday && ceilDate.toDateString() === rangeStart.toDateString();\r\n    const isTodayInRangeDay = isRange && isToday && ceilDate < rangeEnd && ceilDate > rangeStart;\r\n    const isTodayEndRange = isRange && isToday && ceilDate.toDateString() === rangeEnd.toDateString();\r\n    const isRangeStart = isRange && ceilDate.toDateString() === rangeStart.toDateString();\r\n    const isRangeEnd = isRange && ceilDate.toDateString() === rangeEnd.toDateString();\r\n    const isInRangeDay = isRange && ceilDate > rangeStart && ceilDate < rangeEnd;\r\n    const isCurrentMonthDay = month === currentMonth;\r\n\r\n    if (isTodayStartRange) return RangeStartCurrentDay;\r\n    if (isTodayEndRange) return RangeEndCurrentDay;\r\n    if (isTodayInRangeDay) return InRangeCurrentDay;\r\n    if (isToday) return CurrentDay;\r\n    if (isRangeStart) return RangeStartDay;\r\n    if (isRangeEnd) return RangeEndDay;\r\n    if (isInRangeDay) return InRangeDay;\r\n    if (isCurrentMonthDay) return Day;\r\n    return OthertMonthDay;\r\n  }\r\n\r\n  useEffect(() => {\r\n    setIsHoliday(getHolidayStatus());\r\n  }, [day, month, year]);\r\n\r\n  function handlerOnClick() {\r\n    const newDate = new Date(year, month, day);\r\n    handler(newDate);\r\n  }\r\n\r\n  function handlerOnContext(e: MouseEvent<HTMLElement>) {\r\n    const newStatus = !isHoliday;\r\n    setIsHoliday(newStatus);\r\n\r\n    const holidays = JSON.parse(localStorage.getItem('holidays')) ?? {};\r\n\r\n    if (newStatus) {\r\n      holidays[key] = newStatus;\r\n    } else {\r\n      delete holidays[key];\r\n    }\r\n\r\n    localStorage.setItem('holidays', JSON.stringify(holidays));\r\n\r\n    onContext();\r\n\r\n    e.preventDefault();\r\n  }\r\n\r\n  return (\r\n    <Component onClick={handlerOnClick} onContextMenu={handlerOnContext} $isHoliday={isHoliday}>\r\n      {day}\r\n    </Component>\r\n  );\r\n};\r\n\r\nexport const DayCeil = memo(DayCeilComponent);\r\n","import styled, { css } from 'styled-components';\r\n\r\nexport const Week = styled.ul<{ $withoutHolidays: boolean }>`\r\n  display: grid;\r\n  justify-content: space-between;\r\n  grid-template-columns: repeat(7, 1fr);\r\n\r\n  ${({ $withoutHolidays }) =>\r\n    $withoutHolidays &&\r\n    css`\r\n      grid-template-columns: repeat(5, 1fr);\r\n    `}\r\n`;\r\n\r\nexport const WeekDay = styled.li`\r\n  color: ${(props) => props.theme.textColor};\r\n  font-size: ${(props) => props.theme.fontSize};\r\n  font-weight: 700;\r\n  padding: ${(props) => props.theme.padding};\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const Days = styled.div<{ $withoutHolidays: boolean }>`\r\n  display: grid;\r\n  justify-content: space-between;\r\n  grid-template-rows: repeat(6, 1fr);\r\n  grid-template-columns: repeat(7, 1fr);\r\n\r\n  ${({ $withoutHolidays }) =>\r\n    $withoutHolidays &&\r\n    css`\r\n      grid-template-columns: repeat(5, 1fr);\r\n    `}\r\n`;\r\n","import { IDateCellItemDays, IRenderData } from '@appTypes/index';\r\nimport { FC, memo } from 'react';\r\n\r\nimport { DayCeil } from './DayCeil';\r\nimport { Days, Week, WeekDay } from './styled';\r\n\r\nconst DaysComponent: FC<IRenderData> = ({\r\n  calendarItems,\r\n  currentMonth,\r\n  weekDays,\r\n  clendarItemHandler,\r\n  rangeStart,\r\n  rangeEnd,\r\n  handlerOnContextCalendarItem,\r\n  withoutHolidays,\r\n}) => {\r\n  return (\r\n    <>\r\n      <Week $withoutHolidays={withoutHolidays}>\r\n        {weekDays.map((day) => (\r\n          <WeekDay key={day}>{day}</WeekDay>\r\n        ))}\r\n      </Week>\r\n      <Days $withoutHolidays={withoutHolidays}>\r\n        {calendarItems.map((date, index) => (\r\n          <DayCeil\r\n            date={date as IDateCellItemDays}\r\n            handler={clendarItemHandler}\r\n            onContext={handlerOnContextCalendarItem}\r\n            currentMonth={currentMonth}\r\n            key={index}\r\n            rangeStart={rangeStart}\r\n            rangeEnd={rangeEnd}\r\n          />\r\n        ))}\r\n      </Days>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const DaysView = memo(DaysComponent);\r\n","import styled from 'styled-components';\r\n\r\nexport const Month = styled.li`\r\n  font-size: 16px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: ${(props) => props.theme.borderRadius};\r\n  transition: ${(props) => props.theme.transition};\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    transition: ${(props) => props.theme.transition};\r\n    background-color: ${(props) => props.theme.hoverColor};\r\n  }\r\n\r\n  &:active {\r\n    transition: ${(props) => props.theme.transition};\r\n    transform: ${(props) => props.theme.transformActive};\r\n  }\r\n`;\r\n\r\nexport const CurrentMonth = styled(Month)`\r\nbackground: ${(props) => props.theme.activeCollor};\r\ncolor: #fff;\r\n\r\n&:hover {\r\n  cursor: pointer;\r\n  transition: ${(props) => props.theme.transition};\r\n  background-color: ${(props) => props.theme.activeCollor};\r\n`;\r\n","import { Months } from '@appTypes/index';\r\nimport { getDateData } from '@utils/helpers/getDateData';\r\nimport { FC, memo } from 'react';\r\n\r\nimport { CurrentMonth, Month } from './styled';\r\nimport { IMonthComponentProps } from './types';\r\n\r\nexport const MonthCeilComponent: FC<IMonthComponentProps> = ({ date, handler }) => {\r\n  const { month, year } = date;\r\n  const { month: todayMonth, year: todayYear } = getDateData(new Date());\r\n  const monthString = Months[month].slice(0, 3);\r\n  const View = month === todayMonth && year === todayYear ? CurrentMonth : Month;\r\n\r\n  function handlerOnClick() {\r\n    const newDate = new Date(year, month, 1);\r\n    handler(newDate, 'month');\r\n  }\r\n\r\n  return <View onClick={handlerOnClick}>{monthString}</View>;\r\n};\r\n\r\nexport const MonthCeil = memo(MonthCeilComponent);\r\n","import { IRenderData } from '@appTypes/index';\r\nimport { FC, memo } from 'react';\r\n\r\nimport { MonthCeil } from './MonthCeil';\r\nimport { MonthContainer } from './styled';\r\n\r\nconst MonthsComponent: FC<IRenderData> = ({ calendarItems, clendarItemHandler }) => {\r\n  return (\r\n    <MonthContainer>\r\n      {calendarItems.map((date, index) => (\r\n        <MonthCeil date={date} handler={clendarItemHandler} key={index} />\r\n      ))}\r\n    </MonthContainer>\r\n  );\r\n};\r\n\r\nexport const MonthsView = memo(MonthsComponent);\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div``;\r\n\r\nexport const Title = styled.h2`\r\n  font-size: ${(props) => props.theme.fontSize};\r\n  color: ${(props) => props.theme.textColor};\r\n  transition: ${(props) => props.theme.transition};\r\n  font-weight: 700;\r\n  text-align: center;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 85%;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const TodoList = styled.ol`\r\n  flex: 1 1 auto;\r\n  overflow-y: auto;\r\n  font-size: ${(props) => props.theme.fontSize};\r\n  max-height: 145px;\r\n  padding-right: 2px;\r\n  margin-right: -4px;\r\n`;\r\n\r\nexport const Field = styled.form`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  width: 100%;\r\n  column-gap: 10px;\r\n`;\r\n\r\nexport const ButtonAdd = styled.button.attrs({\r\n  type: 'submit',\r\n})`\r\n  background: transparent;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Icon = styled.img.attrs(({ src }) => ({\r\n  src: src,\r\n  alt: 'add todo',\r\n}))`\r\n  width: 20px;\r\n  height: 20px;\r\n  transition: ${(props) => props.theme.transition};\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  &:active {\r\n    transition: ${(props) => props.theme.transition};\r\n    transform: ${(props) => props.theme.transformActive};\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input.attrs({\r\n  placeholder: 'Type a todo...',\r\n  type: 'text',\r\n})`\r\n  border-radius: ${(props) => props.theme.borderRadius};\r\n  border: 1px solid ${(props) => props.theme.borderColor};\r\n  height: 20px;\r\n  padding: 4px;\r\n  width: 100%;\r\n  transition: ${(props) => props.theme.transition};\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const TodoItem = styled.li`\r\n  display: flex;\r\n  justidy-content: space-between;\r\n  column-gap: 10px;\r\n`;\r\n\r\nexport const Todo = styled.p`\r\n  width: 220px;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n`;\r\n\r\nexport const ButtonRemove = styled.button`\r\n  background: transparent;\r\n`;\r\n\r\nexport const Icon = styled.img.attrs(({ src }) => ({\r\n  src: src,\r\n  alt: 'remove button',\r\n}))`\r\n  width: 20px;\r\n  height: 20px;\r\n  transition: ${(props) => props.theme.transition};\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  &:active {\r\n    transition: ${(props) => props.theme.transition};\r\n    transform: ${(props) => props.theme.transformActive};\r\n  }\r\n`;\r\n","import removeIcon from '@assets/x-mark.png';\r\nimport { FC, MouseEvent, useMemo } from 'react';\r\n\r\nimport { ButtonRemove, Icon, Todo, TodoItem } from './styled';\r\nimport { ITodoItemProps } from './types';\r\n\r\nexport const TodoItemComponent: FC<ITodoItemProps> = ({ todo, index, handler }) => {\r\n  const todoString = useMemo(getTodo, []);\r\n\r\n  function getTodo() {\r\n    return `${index}. ${todo}`;\r\n  }\r\n\r\n  function handlerOnClick(e: MouseEvent<HTMLButtonElement>) {\r\n    handler(todo);\r\n    e.preventDefault();\r\n  }\r\n\r\n  return (\r\n    <TodoItem>\r\n      <Todo>{todoString}</Todo>\r\n      <ButtonRemove onClick={handlerOnClick}>\r\n        <Icon src={removeIcon} />\r\n      </ButtonRemove>\r\n    </TodoItem>\r\n  );\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Year = styled.li`\r\n  font-size: 18px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: ${(props) => props.theme.borderRadius};\r\n  transition: ${(props) => props.theme.transition};\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    transition: ${(props) => props.theme.transition};\r\n    background-color: ${(props) => props.theme.hoverColor};\r\n  }\r\n\r\n  &:active {\r\n    transition: ${(props) => props.theme.transition};\r\n    transform: ${(props) => props.theme.transformActive};\r\n  }\r\n`;\r\n\r\nexport const CurrentYear = styled(Year)`\r\nbackground: ${(props) => props.theme.activeCollor};\r\ncolor: #fff;\r\n\r\n&:hover {\r\n  cursor: pointer;\r\n  transition: ${(props) => props.theme.transition};\r\n  background-color: ${(props) => props.theme.activeCollor};\r\n`;\r\n\r\nexport const OthertMonthDay = styled(Year)`\r\n  color: ${(props) => props.theme.otherDateColor};\r\n`;\r\n","import { getDateData } from '@utils/helpers/getDateData';\r\nimport { FC } from 'react';\r\n\r\nimport { CurrentYear, OthertMonthDay, Year } from './styled';\r\nimport { IMonthComponentProps } from './types';\r\n\r\nexport const YearCeil: FC<IMonthComponentProps> = ({ date, handler, isOtherDecadeYear }) => {\r\n  const { year: todayYear } = getDateData(new Date());\r\n  const { year } = date;\r\n  let View;\r\n\r\n  if (year === todayYear) {\r\n    View = CurrentYear;\r\n  } else if (isOtherDecadeYear) {\r\n    View = OthertMonthDay;\r\n  } else {\r\n    View = Year;\r\n  }\r\n\r\n  function handlerOnClick() {\r\n    const newDate = new Date(year, 0, 1);\r\n    handler(newDate, 'month');\r\n  }\r\n\r\n  return <View onClick={handlerOnClick}>{year}</View>;\r\n};\r\n","import openSansBold from '@assets/fonts/OpenSans-Bold.ttf';\r\nimport openSansMedium from '@assets/fonts/OpenSans-Medium.ttf';\r\nimport openSansRegular from '@assets/fonts/OpenSans-Regular.ttf';\r\nimport openSansSemiBold from '@assets/fonts/OpenSans-SemiBold.ttf';\r\nimport styled, { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n* {\r\n  padding: 0;\r\n  margin: 0;\r\n  border: 0;\r\n  font-family: 'Open Sans';\r\n  font-weight: 400;\r\n\r\n  ul {\r\n    list-style: none;\r\n  }\r\n\r\n  ::-webkit-scrollbar {\r\n    width: 2px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-track {\r\n    background-color: white;\r\n  }\r\n\r\n  ::-webkit-scrollbar-thumb {\r\n    background-color: ${(props) => props.theme.textColor};\r\n    border-radius: 8px;\r\n  }\r\n\r\n\r\n  input:focus, input:focus-visible {\r\n    outline: none;\r\n    transition: ${(props) => props.theme.transition};\r\n  }\r\n\r\n  @font-face {\r\n    font-family: 'Open Sans';\r\n    src: url(${openSansRegular}) format('truetype');\r\n    font-weight: 400;\r\n    font-style: normal;\r\n    font-display: auto;\r\n  }\r\n  @font-face {\r\n    font-family: 'Open Sans';\r\n    src: url(${openSansMedium}) format('truetype');\r\n    font-weight: 500;\r\n    font-style: normal;\r\n    font-display: auto;\r\n  }\r\n  @font-face {\r\n    font-family: 'Open Sans';\r\n    src: url(${openSansSemiBold}) format('truetype');\r\n    font-weight: 600;\r\n    font-style: normal;\r\n    font-display: auto;\r\n  }\r\n  @font-face {\r\n    font-family: 'Open Sans';\r\n    src: url(${openSansBold}) format('truetype');\r\n    font-weight: 700;\r\n    font-style: normal;\r\n    font-display: auto;\r\n  }\r\n}\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  width: ${(props) => props.theme.width};\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n","import styled, { css } from 'styled-components';\r\n\r\nexport const Calendar = styled.section<{ $withRangeDecorator: boolean; $withClearRangeButton: boolean }>`\r\n  width: ${(props) => props.theme.width};\r\n  height: ${(props) => props.theme.height};\r\n  border-radius: ${(props) => props.theme.borderRadius};\r\n  border: 1px solid ${(props) => props.theme.borderColor};\r\n  background: #fff;\r\n  padding: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  overflow: hidden;\r\n  box-sizing: border-box;\r\n\r\n  ${({ $withRangeDecorator }) =>\r\n    $withRangeDecorator &&\r\n    css`\r\n      border-radius: ${(props) => props.theme.borderRadius} ${(props) => props.theme.borderRadius} 0px 0px;\r\n    `}\r\n\r\n  ${({ $withClearRangeButton }) =>\r\n    $withClearRangeButton &&\r\n    css`\r\n      border-radius: ${(props) => props.theme.borderRadius};\r\n    `}\r\n`;\r\n\r\nexport const Navigation = styled.nav`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 5px 0;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  font-size: ${(props) => props.theme.fontSize};\r\n  color: ${(props) => props.theme.textColor};\r\n  font-weight: 700;\r\n  font-family: 'Open Sans';\r\n  transition: ${(props) => props.theme.transition};\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    transition: ${(props) => props.theme.transition};\r\n  }\r\n\r\n  &:active {\r\n    transition: ${(props) => props.theme.transition};\r\n    transform: scale(0.9);\r\n  }\r\n`;\r\n\r\nexport const DateButton = styled.img.attrs(({ src }) => ({\r\n  src: src,\r\n  alt: 'poster',\r\n}))`\r\n  width: 20px;\r\n  height: 20px;\r\n  transition: ${(props) => props.theme.transition};\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  &:active {\r\n    transition: ${(props) => props.theme.transition};\r\n    transform: ${(props) => props.theme.transformActive};\r\n  }\r\n`;\r\n\r\nexport const Body = styled.div`\r\n  display: grid;\r\n  height: 100%;\r\n`;\r\n\r\nexport const RangeClearButton = styled.button<{ $visability?: boolean }>`\r\n  width: ${(props) => props.theme.width};\r\n  background-color: transparent;\r\n  border: 1px solid ${(props) => props.theme.borderColor};\r\n  border-radius: 0px 0px ${(props) => props.theme.borderRadius} ${(props) => props.theme.borderRadius};\r\n  transition: ${(props) => props.theme.transition};\r\n  height: 36px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-top: none;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  &:active {\r\n    transition: ${(props) => props.theme.transition};\r\n    opacity: 0.6;\r\n  }\r\n\r\n  ${({ $visability }) =>\r\n    $visability &&\r\n    css`\r\n      display: none;\r\n    `}\r\n`;\r\n","import { CustomTheme, IDecorator, IRenderData, ITheme, ViewType } from '@appTypes/index';\r\nimport arrowLeftIcon from '@assets/arrow-left.png';\r\nimport arrowRightIcon from '@assets/arrow-right.png';\r\nimport { DateInput } from '@components/DateInput';\r\nimport { DateRange } from '@components/DateRange';\r\nimport { DaysView } from '@components/DaysView';\r\nimport { MonthsView } from '@components/MonthView';\r\nimport { Todos } from '@components/Todos';\r\nimport { YearsView } from '@components/YearsView';\r\nimport { theme } from '@constants/theme';\r\nimport { GlobalStyles, Wrapper } from '@styles/index';\r\nimport { ThemeProvider } from 'styled-components';\r\n\r\nimport { Body, Calendar, DateButton, Navigation, RangeClearButton, Title } from './styled';\r\nimport { IView } from './types';\r\n\r\nexport class View implements IView {\r\n  getView(renderData: IRenderData, decorators: IDecorator) {\r\n    const {\r\n      currentDateString,\r\n      getNextDate,\r\n      getPrevDate,\r\n      setUserDate,\r\n      titleHandler,\r\n      currentDate,\r\n      handlerOnContextNextDate,\r\n      handlerOnContextPrevDate,\r\n      hadnlerOnClickClearDateRange,\r\n      minDate,\r\n      maxDate,\r\n      theme: customTheme,\r\n      handlerOnDateRange,\r\n      rangeStart,\r\n      rangeEnd,\r\n    } = renderData;\r\n\r\n    const { datePicker: datePickerDecorator, range: rangeDecorator, view } = decorators;\r\n    const title = this.getCalendatTitle(view, currentDateString, minDate, maxDate, currentDate);\r\n    const styles = this.getStyles(customTheme);\r\n    const clearRangeButtonVisability = !(rangeStart || rangeEnd);\r\n\r\n    return (\r\n      <ThemeProvider theme={styles}>\r\n        <GlobalStyles />\r\n        <Wrapper>\r\n          {datePickerDecorator && (\r\n            <DateInput handlerOnSubmit={setUserDate} maxDate={maxDate} minDate={minDate} />\r\n          )}\r\n\r\n          {rangeDecorator && (\r\n            <DateRange\r\n              handlerRange={handlerOnDateRange}\r\n              rangeStart={rangeStart}\r\n              rangeEnd={rangeEnd}\r\n              minDate={minDate}\r\n              maxDate={maxDate}\r\n            />\r\n          )}\r\n\r\n          <Calendar $withRangeDecorator={rangeDecorator} $withClearRangeButton={clearRangeButtonVisability}>\r\n            <Navigation>\r\n              <DateButton\r\n                src={arrowLeftIcon}\r\n                onClick={getPrevDate}\r\n                onContextMenu={handlerOnContextPrevDate}\r\n              />\r\n              <Title onClick={titleHandler}>{title}</Title>\r\n              <DateButton\r\n                src={arrowRightIcon}\r\n                onClick={getNextDate}\r\n                onContextMenu={handlerOnContextNextDate}\r\n              />\r\n            </Navigation>\r\n            <Body>\r\n              {view === 'decade' && <YearsView {...renderData} />}\r\n              {view === 'year' && <MonthsView {...renderData} />}\r\n              {(!view || view === 'month') && <DaysView {...renderData} />}\r\n              {view === 'day' && <Todos {...renderData} />}\r\n            </Body>\r\n          </Calendar>\r\n          {rangeDecorator && (\r\n            <RangeClearButton onClick={hadnlerOnClickClearDateRange} $visability={clearRangeButtonVisability}>\r\n              Clear\r\n            </RangeClearButton>\r\n          )}\r\n        </Wrapper>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n\r\n  private getStyles(customTheme: CustomTheme): CustomTheme {\r\n    const styles: CustomTheme = theme;\r\n\r\n    if (customTheme) {\r\n      for (const styleKey in theme) {\r\n        if (styleKey in theme) {\r\n          const style = styleKey as keyof ITheme;\r\n          styles[style] = customTheme[style] ?? theme[style];\r\n        }\r\n      }\r\n    }\r\n    return styles;\r\n  }\r\n\r\n  private getCalendatTitle(\r\n    view: ViewType,\r\n    currentDateString: string,\r\n    minDate: Date,\r\n    maxDate: Date,\r\n    currentDate: Date,\r\n  ) {\r\n    if (view === 'decade') {\r\n      const currentYear = currentDateString.slice(-4);\r\n      const startDecade = Math.trunc(+currentYear / 10) * 10;\r\n      const titleDateFrom = Math.max(startDecade, minDate.getFullYear());\r\n      const endDecade = Math.min(startDecade + 9, maxDate.getFullYear());\r\n\r\n      return `${titleDateFrom} — ${endDecade}`;\r\n    }\r\n\r\n    if (view === 'year') {\r\n      return currentDateString.slice(-4);\r\n    }\r\n\r\n    if (view === 'day') {\r\n      const day = currentDate.getDate();\r\n\r\n      return `${day} ${currentDateString}`;\r\n    }\r\n\r\n    return currentDateString;\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}